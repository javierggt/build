name: Build Ska Package
description: "A Github Action to build a Ska3 package."
author: Javier G Gonzalez
inputs:
  package_name:
    description: Package name (or github repository) to build
    required: false
    type: string
    default: ${GITHUB_REPOSITORY}
  tag:
    description: tag/ref/commit-sha
    required: false
    type: string
    default: ${GITHUB_SHA}
  noarch:
    description: Does not build arch-specific packages
    required: false
    type: boolean
    default: false
  python_version:
    description: Python version
    required: false
    type: string
    default: "3.10"
  numpy_version:
    description: Numpy version
    required: false
    type: string
    default: "1.21"
  miniconda_version:
    description: Miniconda version
    required: false
    type: string
    default: py39_4.12.0
  skare3_repository:
    description: Skare3 repository
    required: false
    type: string
    default: sot/skare3
  skare3_branch:
    description: Branch of skare3
    required: false
    type: string
    default: master
  channel:
    description: Ska Conda channel to pull packages from
    required: false
    type: string
    default: flight
  platform:
    description: Platform to build for
    required: false
    type: string
    default: ubuntu-latest
  git_user:
    description: Git username
    required: false
    type: string
    default: chandra-xray
  git_token:
    description: Git token (corresponding to git_user)
    required: true
  CONDA_PASSWORD:
    required: true

branding:
  color: "black"
  icon: "package"

runs:
  using: "composite"
  steps:

  # the following action checks the client_payload if this is in a repository dispatch
  # sets the boolean arguments properly
  - id: argument_parser
    uses: skare3/check-arguments@main
    with:
      arguments: |
        - name: package_name
          default: ${{ inputs.package_name }}
        - name: tag
          default: ${{ inputs.tag }}
        - name: noarch
          type: boolean
          default: ${{ inputs.noarch }}
        - name: python_version
          default: ${{ inputs.python_version }}
        - name: numpy_version
          default: ${{ inputs.numpy_version }}
        - name: miniconda_version
          default: ${{ inputs.miniconda_version }}
        - name: skare3_branch
          default: ${{ inputs.skare3_branch }}
        - name: channel
          default: ${{ inputs.channel }}
        - name: platform
          default: ${{ inputs.platform }}
  - id: arguments
    shell: bash -l {0}
    run: |
      echo "package_name=${{ fromJson(steps.argument_parser.outputs.arguments).package_name }}" >> $GITHUB_OUTPUT
      echo "tag=${{ fromJson(steps.argument_parser.outputs.arguments).tag }}" >> $GITHUB_OUTPUT
      echo "noarch=${{ fromJson(steps.argument_parser.outputs.arguments).noarch }}" >> $GITHUB_OUTPUT
      echo "python_version=${{ fromJson(steps.argument_parser.outputs.arguments).python_version }}" >> $GITHUB_OUTPUT
      echo "numpy_version=${{ fromJson(steps.argument_parser.outputs.arguments).numpy_version }}" >> $GITHUB_OUTPUT
      echo "miniconda_version=${{ fromJson(steps.argument_parser.outputs.arguments).miniconda_version }}" >> $GITHUB_OUTPUT
      echo "skare3_branch=${{ fromJson(steps.argument_parser.outputs.arguments).skare3_branch }}" >> $GITHUB_OUTPUT
      echo "channel=${{ fromJson(steps.argument_parser.outputs.arguments).channel }}" >> $GITHUB_OUTPUT
      echo "platform=${{ fromJson(steps.argument_parser.outputs.arguments).platform }}" >> $GITHUB_OUTPUT
  - shell: bash -l {0}
    run: |
      echo "## Arguments:" >> $GITHUB_STEP_SUMMARY
      echo "package_name: ${{ steps.arguments.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
      echo "tag: ${{ steps.arguments.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
      echo "noarch: ${{ steps.arguments.outputs.noarch }}" >> $GITHUB_STEP_SUMMARY
      echo "python_version: ${{ steps.arguments.outputs.python_version }}" >> $GITHUB_STEP_SUMMARY
      echo "numpy_version: ${{ steps.arguments.outputs.numpy_version }}" >> $GITHUB_STEP_SUMMARY
      echo "miniconda_version: ${{ steps.arguments.outputs.miniconda_version }}" >> $GITHUB_STEP_SUMMARY
      echo "skare3_branch: ${{ steps.arguments.outputs.skare3_branch }}" >> $GITHUB_STEP_SUMMARY
      echo "channel: ${{ steps.arguments.outputs.channel }}" >> $GITHUB_STEP_SUMMARY
      echo "platform: ${{ steps.arguments.outputs.platform }}" >> $GITHUB_STEP_SUMMARY
  - name: Show Inputs Summary
    shell: bash -l {0}
    run: |
      echo "## Inputs:" >> $GITHUB_STEP_SUMMARY
      echo OS: ${{ steps.arguments.outputs.platform }} >> $GITHUB_STEP_SUMMARY
      echo package_name: \'${{ steps.arguments.outputs.package_name }}\' >> $GITHUB_STEP_SUMMARY
      echo tag: \'${{ steps.arguments.outputs.tag }}\' >> $GITHUB_STEP_SUMMARY
      echo noarch: \'${{ steps.arguments.outputs.noarch }}\' >> $GITHUB_STEP_SUMMARY
      echo python_version: \'${{ steps.arguments.outputs.python_version }}\' >> $GITHUB_STEP_SUMMARY
      echo numpy_version: \'${{ steps.arguments.outputs.numpy_version }}\' >> $GITHUB_STEP_SUMMARY
      echo miniconda_version: \'${{ steps.arguments.outputs.miniconda_version }}\' >> $GITHUB_STEP_SUMMARY
      echo skare3_branch: \'${{ steps.arguments.outputs.skare3_branch }}\' >> $GITHUB_STEP_SUMMARY
  - name: Fetch Skare3
    uses: actions/checkout@v3
    with:
      repository: ${{ steps.arguments.outputs.skare3_repository }}
      ref: ${{ steps.arguments.outputs.skare3_branch }}
      path: skare3
  - name: Setup Conda Environment
    uses: conda-incubator/setup-miniconda@v3
    with:
      # mamba-version: "*"
      auto-update-conda: true
      use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      python-version: ${{ inputs.python_version }}
      activate-environment: conda-build
      channels: https://ska:${{ inputs.CONDA_PASSWORD }}@cxc.cfa.harvard.edu/mta/ASPECT/ska3-conda/${{ steps.arguments.outputs.channel }},conda-forge
  - name: List Conda Environment
    shell: bash -l {0}
    run: |
      conda list
      conda list python
  - name: Update Conda Environment
    shell: bash -l {0}
    run:
      cat ./skare3/build-environment.yml
  - name: Update Conda Environment
    shell: bash -l {0}
    run:
      conda env update -n conda-build -f ./skare3/build-environment.yml
  - name: List Conda Environment
    shell: bash -l {0}
    run: |
      conda list
      conda list python
  - name: Install ska_helpers
    shell: bash -l {0}
    run: |
      conda search ska_helpers
      err=$?
      if [ !$err ]
      then ${CONDA_EXE} install ska_helpers
      fi
      conda search testr
      err=$?
      if [ !$err ]
      then ${CONDA_EXE} install testr
      fi
  - name: Env List
    shell: bash -l {0}
    run: conda list
  - name: Build Package
    shell: bash -l {0}
    run: |
      arch_arg=`if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then echo; else echo '--arch-specific'; fi`
      python ${GITHUB_ACTION_PATH}/files/build.py $arch_arg ${{ steps.arguments.outputs.package_name }} --tag ${{ steps.arguments.outputs.tag }} --python ${{ steps.arguments.outputs.python_version }} --numpy ${{ steps.arguments.outputs.numpy_version }} --skare3-branch ${{ steps.arguments.outputs.skare3_branch }} -c https://ska:${{ steps.arguments.outputs.CONDA_PASSWORD }}@cxc.cfa.harvard.edu/mta/ASPECT/ska3-conda/${{ steps.arguments.outputs.channel }} -c conda-forge
    env:
      CONDA_PASSWORD: ${{ steps.arguments.outputs.CONDA_PASSWORD }}
      GIT_USERNAME: ${{ steps.arguments.outputs.git_user }
      GIT_ASKPASS: ${{ github.action_path }}/files/git_pass.py
      GIT_PASSWORD: ${{ steps.arguments.outputs.git_token }}
  - name: Summary
    shell: bash -l {0}
    run: |
      files=`find  builds/noarch/ builds/linux-64/ builds/osx-64/ builds/win-64/ -not -name \*repodata\* -not -name index.html -not -name .ensure-non-empty-dir -type f`
      echo "## Packages Built:" >> $GITHUB_STEP_SUMMARY
      for f in $files; do echo "- $f" >> $GITHUB_STEP_SUMMARY; done;
  - name: Save package
    uses: actions/upload-artifact@v2.2.4
    with:
      name: conda-package
      path: |
        builds/noarch/
        builds/linux-64/
        builds/osx-64/
        builds/win-64/
        !builds/*/*repodata*
        !builds/*/index.html
